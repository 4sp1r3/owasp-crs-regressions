---
Examples:
    # In our first example we show that a request will be generated
    # even if you don't pass any arguments. This should generate a
    # GET request for / on localhost, port 80. It expects a 200 
    # response
    - test:
        - meta:
            name: "Example 1 - Trigger Nothing"
            id: 1
            author: "Chaim Sanders"
            enabled: True
        - input:
        - output:
    # Here we build the same test as was automaticly generated
    # in our first example, except we specify all of our values
    # as needed.
    - test:
        - meta:
            name: "Example 2 - Trigger Specific Nothing"
            id: 1
            author: "Chaim Sanders"
            enabled: True
        - input:
            protocol: 'http'
            destAddr: 'localhost'
            port: '80'
            method: 'GET'
            url: '/'
            headers: [
                Host: 'localhost',
                User-Agent: 'OWASP CRS Regression'
            ]
            version: 'HTTP/1.1'
        - output:
            status: 200
    # We can also check that different output conditions are true.
    # For instance in the check below, we trigger a specific OWASP
    # CRS rule for ModSecurity. The following triggers a number of
    # ModSecurity XSS rules
    - test:
        - meta:
            name: "Example 3 - Trigger XSS Rules"
            id: 1
            author: "Chaim Sanders"
            enabled: True
        - input:
            protocol: 'http'
            destAddr: 'localhost'
            port: '80'
            method: 'GET'
            url: '/?x="><script>alert(1);</script>'
            headers: [
                Host: 'localhost',
                User-Agent: 'OWASP CRS Regression'
            ]
            version: 'HTTP/1.1'
        - output:
            status: 200
            triggers: [941100] 
            log_contains: 'XSS Attack Detected via Libinjection'
    # In general you can get fairly specific using the built in 
    # parsing. It will calculate content-length for you, like
    # magic.            
    - test:
        - meta:
            name: "Example 4 - POST rule"
            id: 1
            author: "Chaim Sanders"
            enabled: True
        - input:
            method: 'POST'
            url: '/'
            data: 'Today is the first day of my life'
            headers: [
                Host: 'localhost',
                User-Agent: 'OWASP CRS Regression'
            ]
            version: 'HTTP/1.1'
        - output:
            status: 200     
    # If you need more control, you can always fail back to raw.
    # requests. These should allow you to do anything you need,
    # even if it's against all spec.            
    - test:
        - meta:
            name: "Example 5 - Raw Request rule"
            id: 1
            author: "Chaim Sanders"
            enabled: True
        - input:
            protocol: 'http'
            destAddr: 'localhost'
            port: '80'
            rawRequest: |
                GET / HTTP/1.1 
                Host: localhost
                User-Agent: OWASP CRS Regression
                
        - output:
            status: 200
